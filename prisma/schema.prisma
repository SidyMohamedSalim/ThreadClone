// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// nextAuth

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  provider           String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  refresh_token_expires_in Float

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// application

model User {
  id       String  @id @default(cuid())
  name     String?
  email    String? @unique
  password String?

  username String?
  link     String?
  bio      String?

  emailVerified DateTime?
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts  Account[]
  sessions  Session[]
  followers Follow[]  @relation(name: "follower")
  followeds Follow[]  @relation(name: "followed")
  posts     Post[]
  likes     Like[]
}

model Post {
  id        String   @id @default(cuid())
  content   String
  parentId  String?
  usetId    String
  createdAt DateTime @default(now())

  user    User   @relation(fields: [usetId], references: [id], onDelete: Cascade)
  replies Post[] @relation("comments")
  parent  Post?  @relation(name: "comments", fields: [parentId], references: [id])
  likes   Like[]
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower User @relation(fields: [followerId], references: [id], onDelete: Cascade, name: "follower")

  followed User @relation(fields: [followingId], references: [id], onDelete: Cascade, name: "followed")
}
